"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOutputFilesBasedOnPolicy = exports.getOutputFiles = exports.saveFile = exports.executeScript = void 0;
/* eslint-disable camelcase */
var child_process_1 = require("child_process");
var fs_1 = require("fs");
var os_1 = __importDefault(require("os"));
var agentmanager_1 = __importDefault(require("../agentmanager"));
var actions_1 = require("../declarations/actions");
var messageformatter_1 = __importDefault(require("../message/messageformatter"));
var logger_1 = __importDefault(require("../utils/logger"));
function executeScript(cmd, task_id, excessDeps, callbacks, ops) {
    var op;
    if (ops)
        op = ops;
    else
        op = { cwd: actions_1.FILE_BASE_PATH + task_id, shell: os_1.default.platform().startsWith('win') ? 'cmd.exe' : '/bin/bash' };
    var sc = (0, child_process_1.spawn)(cmd, op);
    agentmanager_1.default.getAgent().addToCurrentlyExecutingTasks(task_id);
    sc.stdout.on('data', function (data) {
        var _a;
        // send log message to the ws server
        logger_1.default.log('log-', task_id, data.toString());
        (_a = agentmanager_1.default.getAgent()
            .getWSClient()) === null || _a === void 0 ? void 0 : _a.sendMessage(messageformatter_1.default.prepareLogMessage(task_id, data));
        if (callbacks && callbacks.ondata)
            callbacks.ondata(data);
    });
    sc.stderr.on('data', function (data) {
        var _a;
        // handle the err message and inform the server
        logger_1.default.redBrightError('log-errored-', task_id, ':', data.toString());
        (_a = agentmanager_1.default.getAgent()
            .getWSClient()) === null || _a === void 0 ? void 0 : _a.sendMessage(messageformatter_1.default.prepareLogMessage(task_id, data));
        if (callbacks && callbacks.onerror)
            callbacks.onerror(data);
    });
    sc.on('close', function (code) {
        var _a, _b;
        if (code === 0) {
            logger_1.default.greenBrightLog('execution for task:', task_id, "executed successfully with code:" + code);
            agentmanager_1.default.getAgent().removeFromCurrentlyExecutingTasks(task_id);
            (_a = agentmanager_1.default.getAgent()
                .getWSClient()) === null || _a === void 0 ? void 0 : _a.sendMessage(messageformatter_1.default.prepareScriptExecutionUpdateMessage(task_id, true, code, excessDeps.outputRequestObjects));
        }
        else {
            logger_1.default.redBrightError('execution for task:', task_id, "failed with code:" + code);
            (_b = agentmanager_1.default.getAgent()
                .getWSClient()) === null || _b === void 0 ? void 0 : _b.sendMessage(messageformatter_1.default.prepareScriptExecutionUpdateMessage(task_id, false, code, excessDeps.outputRequestObjects));
        }
        if (callbacks && callbacks.onclose)
            callbacks.onclose(code);
    });
}
exports.executeScript = executeScript;
function saveFile(basePath, filename, filedata, executable) {
    try {
        if (!(0, fs_1.existsSync)(basePath))
            (0, fs_1.mkdirSync)(basePath, { recursive: true });
        if (filename.split('/').length >= 2) {
            var filepath = filename.split('/').slice(0, -1).join('/');
            if (!(0, fs_1.existsSync)(basePath + "/" + filepath))
                (0, fs_1.mkdirSync)(basePath + "/" + filepath, { recursive: true });
        }
        var data = Buffer.from(filedata, 'base64');
        (0, fs_1.writeFileSync)(basePath + "/" + filename, data.toString());
        if (executable)
            (0, fs_1.chmodSync)(basePath + "/" + filename, 700);
        else
            (0, fs_1.chmodSync)(basePath + "/" + filename, 600);
    }
    catch (err) {
        // handle the error
        console.log(err);
    }
}
exports.saveFile = saveFile;
function getOutputFiles(outputRequestObjects) {
    var outputFiles = [];
    for (var i = 0; i < outputRequestObjects.length; i += 1) {
        var file_path = outputRequestObjects[i].file_path;
        if ((0, fs_1.existsSync)(file_path)) {
            var buffer = (0, fs_1.readFileSync)(file_path).toString('base64');
            outputFiles.push({
                file_path: file_path,
                buffer: buffer,
            });
        }
    }
    return outputFiles;
}
exports.getOutputFiles = getOutputFiles;
function getOutputFilesBasedOnPolicy(outputRequestObjects, fetchPolicy) {
    switch (fetchPolicy) {
        case 'fetchOnSuccess':
            var OnsucessRequestObjects = outputRequestObjects
                .filter(function (e) { return e.fetchPolicy === fetchPolicy; });
            return getOutputFiles(OnsucessRequestObjects);
        case 'fetchOnError':
            var OnerrorRequestObjects = outputRequestObjects
                .filter(function (e) { return e.fetchPolicy === fetchPolicy; });
            return getOutputFiles(OnerrorRequestObjects);
        case 'fetchOnSuccessOrFailure':
            var OnsucessOrErrorRequestObjects = outputRequestObjects
                .filter(function (e) { return e.fetchPolicy === fetchPolicy; });
            return getOutputFiles(OnsucessOrErrorRequestObjects);
        default:
            console.log('policy doesnt match in getOutputFilesBasedOnPolicy(): ', fetchPolicy);
            return [];
    }
}
exports.getOutputFilesBasedOnPolicy = getOutputFilesBasedOnPolicy;
