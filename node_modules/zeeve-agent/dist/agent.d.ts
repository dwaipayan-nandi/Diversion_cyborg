import { MessageToServer } from '.';
import { AgentOps } from './declarations/agent';
import WSClient from './wsclient';
declare class Agent {
    private serverAddress;
    private wsClient;
    private wsClientCallbacks;
    private executeScriptCallbacks;
    private currentlyExecutingTasks;
    private limitFrequencyBasedExecution?;
    private serverAddressUpdater;
    private messageQueue;
    private enableAnalytics;
    private analyticsPort;
    private analyticsHost;
    private analyticsServer?;
    constructor(ops: AgentOps);
    getServerAddress: () => string | undefined;
    getWSClient: () => WSClient | undefined;
    isAnalyticsEnabled(): boolean;
    getAnalyticsHost(): string;
    getAnalyticsPort(): number;
    initiate: () => void;
    /**
     * Remove/Clean the event listeners and resources
     */
    cleanAgentResources(): void;
    getUpdatedServerAddress: () => Promise<string>;
    addToCurrentlyExecutingTasks(task_id: string): void;
    removeFromCurrentlyExecutingTasks(task_id: string): boolean;
    clearAllCurrentlyExecutingTasks(): void;
    isCurrentlyExecutingOrAlreadyExecuted(task_id: string): boolean;
    addMessageToQueue(message: MessageToServer): void;
    removeMessageFromQueue(): MessageToServer | undefined;
    queueHasMessages(): boolean;
    getCurrentlyExecutingTasks(): Set<string>;
}
export default Agent;
