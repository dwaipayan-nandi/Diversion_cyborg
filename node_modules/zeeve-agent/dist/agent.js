"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable camelcase */
var fs_1 = require("fs");
var actions_1 = require("./declarations/actions");
var SchedulerManager_1 = __importDefault(require("./scheduler/SchedulerManager"));
var Queue_1 = __importDefault(require("./utils/Queue"));
var wsclient_1 = __importDefault(require("./wsclient"));
var analytics_1 = __importDefault(require("./analytics"));
var analytics_2 = require("./declarations/analytics");
var Agent = /** @class */ (function () {
    function Agent(ops) {
        var _this = this;
        this.getServerAddress = function () { return _this.serverAddress; };
        this.getWSClient = function () { return _this.wsClient; };
        this.initiate = function () {
            _this.wsClient = new wsclient_1.default(_this.serverAddress, _this.wsClientCallbacks, _this.executeScriptCallbacks);
            // Only start the analytics service if explicity enabled
            if (_this.enableAnalytics) {
                var analyticsServer = new analytics_1.default({
                    analyticsHost: _this.analyticsHost,
                    analyticsPort: _this.analyticsPort,
                    websocketClient: _this.wsClient,
                });
                analyticsServer.startListening();
                _this.analyticsServer = analyticsServer;
            }
            SchedulerManager_1.default.initializeScheduler({
                executeScriptCallbacks: _this.executeScriptCallbacks,
                limitFrequencyBasedExecution: _this.limitFrequencyBasedExecution,
            }).initialize();
        };
        this.getUpdatedServerAddress = function () { return __awaiter(_this, void 0, void 0, function () {
            var address, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.serverAddressUpdater()];
                    case 1:
                        address = _a.sent();
                        return [2 /*return*/, address];
                    case 2:
                        err_1 = _a.sent();
                        console.error('could not update the server address', err_1);
                        throw err_1;
                    case 3: return [2 /*return*/];
                }
            });
        }); };
        this.currentlyExecutingTasks = new Set();
        this.serverAddress = ops.serverAddress;
        this.wsClientCallbacks = ops.clientCallbacks;
        this.executeScriptCallbacks = ops.executeScriptCallbacks;
        this.limitFrequencyBasedExecution = ops.limitFrequencyBasedExecution;
        this.serverAddressUpdater = ops.serverAddressUpdater;
        this.analyticsHost = analytics_2.DEFAULT_ANALYTICS_HOST;
        this.analyticsPort = analytics_2.DEFAULT_ANALYTICS_PORT;
        this.enableAnalytics = false;
        this.analyticsServer = undefined;
        // Enable and set analytics config if explicity enabled and config provided
        if (ops.enableAnalytics === true) {
            this.enableAnalytics = true;
            if (ops.analyticsHost)
                this.analyticsHost = ops.analyticsHost;
            if (ops.analyticsPort)
                this.analyticsPort = ops.analyticsPort;
        }
        this.messageQueue = new Queue_1.default();
    }
    Agent.prototype.isAnalyticsEnabled = function () {
        return this.enableAnalytics;
    };
    Agent.prototype.getAnalyticsHost = function () {
        return this.analyticsHost;
    };
    Agent.prototype.getAnalyticsPort = function () {
        return this.analyticsPort;
    };
    /**
     * Remove/Clean the event listeners and resources
     */
    Agent.prototype.cleanAgentResources = function () {
        var _a;
        if (this.analyticsServer) {
            this.analyticsServer.destroyServer();
        }
        (_a = this.wsClient) === null || _a === void 0 ? void 0 : _a.closeConnection();
    };
    Agent.prototype.addToCurrentlyExecutingTasks = function (task_id) {
        this.currentlyExecutingTasks.add(task_id);
    };
    Agent.prototype.removeFromCurrentlyExecutingTasks = function (task_id) {
        return this.currentlyExecutingTasks.delete(task_id);
    };
    Agent.prototype.clearAllCurrentlyExecutingTasks = function () {
        this.currentlyExecutingTasks.clear();
    };
    Agent.prototype.isCurrentlyExecutingOrAlreadyExecuted = function (task_id) {
        return this.currentlyExecutingTasks.has(task_id)
            || (0, fs_1.existsSync)(actions_1.FILE_BASE_PATH + task_id + "/");
    };
    Agent.prototype.addMessageToQueue = function (message) {
        this.messageQueue.enqueue(message);
    };
    Agent.prototype.removeMessageFromQueue = function () {
        return this.messageQueue.dequeue();
    };
    Agent.prototype.queueHasMessages = function () {
        return !this.messageQueue.isEmpty();
    };
    Agent.prototype.getCurrentlyExecutingTasks = function () {
        return this.currentlyExecutingTasks;
    };
    return Agent;
}());
exports.default = Agent;
