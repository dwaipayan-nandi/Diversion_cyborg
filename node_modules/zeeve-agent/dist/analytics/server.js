"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var express_1 = __importDefault(require("express"));
var http = __importStar(require("http"));
var AnalyticsServer = /** @class */ (function () {
    function AnalyticsServer(options) {
        this.analyticsPort = options.analyticsPort;
        this.analyticsHost = options.analyticsHost;
        this.wsClient = options.websocketClient;
    }
    /**
     * Start listening for HTTP requests for analytics data from
     * Prometheus remote_write service
     */
    AnalyticsServer.prototype.startListening = function () {
        var _this = this;
        var app = (0, express_1.default)();
        app.post('/prometheus/remote/write', function (req, res) {
            var finalData = Buffer.alloc(0);
            req.on('data', function (data) {
                finalData = Buffer.concat([finalData, data]);
            });
            req.on('end', function () {
                _this.wsClient.sendMessage({
                    Action: 'analyticsPrometheusInfo',
                    Payload: {
                        headers: JSON.stringify(req.headers),
                        metricsData: finalData.toString('hex'),
                    },
                });
                res.status(201).send('');
            });
        });
        /**
         * Start listening for HTTP requests for analytics alert from
         * Prometheus remote_write service
         */
        app.post('/prometheus/alert', function (req, res) {
            var finalData = Buffer.alloc(0);
            req.on('data', function (data) {
                finalData = Buffer.concat([finalData, data]);
            });
            req.on('end', function () {
                _this.wsClient.sendMessage({
                    Action: 'analyticsPrometheusAlert',
                    Payload: {
                        headers: JSON.stringify(req.headers),
                        alertsData: finalData.toString('hex'),
                    },
                });
                res.status(201).send('');
            });
        });
        app.post('/loki/log', function (req, res) {
            var finalData = Buffer.alloc(0);
            req.on('data', function (data) {
                finalData = Buffer.concat([finalData, data]);
            });
            req.on('end', function () {
                _this.wsClient.sendMessage({
                    Action: 'lokiLogs',
                    Payload: {
                        headers: JSON.stringify(req.headers),
                        logData: finalData.toString('hex'),
                    },
                });
                res.status(201).send('');
            });
        });
        // initialize a simple http server
        var server = http.createServer(app);
        server.listen({ port: this.analyticsPort, host: this.analyticsHost }, function () {
            console.log('Analytics Listener started');
        });
        this.server = server;
    };
    /**
     * remove the HTTP service event listener
     */
    AnalyticsServer.prototype.destroyServer = function () {
        var _a, _b;
        (_a = this.server) === null || _a === void 0 ? void 0 : _a.removeAllListeners();
        (_b = this.server) === null || _b === void 0 ? void 0 : _b.close();
    };
    return AnalyticsServer;
}());
exports.default = AnalyticsServer;
