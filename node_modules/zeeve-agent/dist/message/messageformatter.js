"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable camelcase */
var actions_1 = require("../actions/actions");
var agentmanager_1 = __importDefault(require("../agentmanager"));
var actions_2 = require("../declarations/actions");
var SchedulerManager_1 = __importDefault(require("../scheduler/SchedulerManager"));
var MessageFormatter = /** @class */ (function () {
    function MessageFormatter() {
    }
    MessageFormatter.prepareLogMessage = function (task_id, log) {
        return {
            Action: actions_2.LOG_UPDATE_ACTION,
            Payload: {
                task_id: task_id,
                log: log,
            },
        };
    };
    MessageFormatter.prepareScriptExecutionUpdateMessage = function (task_id, success, messageOrCode, outputRequestObjects) {
        var outputFiles = [];
        if (success) {
            if (outputRequestObjects) {
                outputFiles.push.apply(outputFiles, (0, actions_1.getOutputFilesBasedOnPolicy)(outputRequestObjects, 'fetchOnSuccess'));
                outputFiles.push.apply(outputFiles, (0, actions_1.getOutputFilesBasedOnPolicy)(outputRequestObjects, 'fetchOnSuccessOrFailure'));
            }
            return {
                Action: actions_2.SCRIPT_EXECUTION_UPDATE_ACTION,
                Payload: {
                    success: success,
                    code: messageOrCode,
                    task_id: task_id,
                    outputFiles: outputFiles,
                },
            };
        }
        if (outputRequestObjects) {
            outputFiles.push.apply(outputFiles, (0, actions_1.getOutputFilesBasedOnPolicy)(outputRequestObjects, 'fetchOnError'));
            outputFiles.push.apply(outputFiles, (0, actions_1.getOutputFilesBasedOnPolicy)(outputRequestObjects, 'fetchOnSuccessOrFailure'));
        }
        return {
            Action: actions_2.SCRIPT_EXECUTION_UPDATE_ACTION,
            Payload: {
                success: success,
                message: messageOrCode,
                task_id: task_id,
                outputFiles: outputFiles,
            },
        };
    };
    MessageFormatter.parseAndExecute = function (msg, exCallbacks) {
        var message = msg;
        if (!message)
            return;
        var _loop_1 = function (i) {
            if (!agentmanager_1.default.getAgent()
                .isCurrentlyExecutingOrAlreadyExecuted(message.Payload[i].task_id)) {
                if (message.Payload[i].frequency < 0) {
                    // single time task
                    var files = message.Payload[i].files;
                    files.forEach(function (file) {
                        (0, actions_1.saveFile)(actions_2.FILE_BASE_PATH + message.Payload[i].task_id + "/", file.file_name, file.buffer, file.executable);
                    });
                    (0, actions_1.executeScript)(message.Payload[i].cmd, message.Payload[i].task_id, {
                        outputRequestObjects: message.Payload[i].outputRequestObjects,
                    }, exCallbacks);
                }
                else {
                    // frequency based task
                    var files = message.Payload[i].files;
                    files.forEach(function (file) {
                        (0, actions_1.saveFile)(actions_2.FILE_BASE_PATH + message.Payload[i].task_id + "/", file.file_name, file.buffer, file.executable);
                    });
                    (0, actions_1.executeScript)(message.Payload[i].cmd, message.Payload[i].task_id, {
                        outputRequestObjects: message.Payload[i].outputRequestObjects,
                    }, exCallbacks);
                    SchedulerManager_1.default.getScheduler().addTask(message.Payload[i]);
                }
            }
        };
        for (var i = 0; i < message.Payload.length; i += 1) {
            _loop_1(i);
        }
    };
    return MessageFormatter;
}());
exports.default = MessageFormatter;
