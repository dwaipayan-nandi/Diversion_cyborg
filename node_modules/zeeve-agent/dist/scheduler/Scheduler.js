"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = __importDefault(require("fs"));
var os_1 = __importDefault(require("os"));
var scheduler_1 = require("../declarations/scheduler");
var actions_1 = require("../actions/actions");
var actions_2 = require("../declarations/actions");
var Scheduler = /** @class */ (function () {
    function Scheduler(ops) {
        var _this = this;
        this.schedulerFileNAME = scheduler_1.SCHEDULER_FILE_NAME;
        this.schedulerFilePath = scheduler_1.SCHEDULER_FILE_PATH;
        // eslint-disable-next-line no-undef
        this.frequencyTimers = [];
        this.initialize = function () {
            _this.readSchedulerFile();
            for (var i = 0; i < _this.schedulerFile.tasks.length; i += 1) {
                _this.schedule(_this.schedulerFile.tasks[i]);
            }
            if (_this.ops.limitFrequencyBasedExecution) {
                var time = 1000;
                for (var i = 0; i < _this.schedulerFile.tasks.length; i += 1) {
                    time += _this.schedulerFile.tasks[i].frequency;
                }
                if (_this.ops.limitFrequencyBasedExecution
                    && _this.ops.limitFrequencyBasedExecution.howmany) {
                    time *= _this.ops.limitFrequencyBasedExecution.howmany.times;
                }
                setTimeout(function () {
                    _this.clearTasks();
                    if (_this.ops.limitFrequencyBasedExecution
                        && _this.ops.limitFrequencyBasedExecution.howmany) {
                        _this.ops.limitFrequencyBasedExecution.howmany.callback();
                    }
                }, time);
            }
        };
        this.readSchedulerFile = function () {
            if (fs_1.default.existsSync(_this.schedulerFilePath + "/" + _this.schedulerFileNAME)) {
                var file = fs_1.default.readFileSync(_this.schedulerFilePath + "/" + _this.schedulerFileNAME);
                _this.schedulerFile = JSON.parse(file.toString());
            }
            else {
                _this.schedulerFile = {
                    tasks: [],
                };
                _this.writeToSchedulerFile();
            }
        };
        this.writeToSchedulerFile = function () {
            if (fs_1.default.existsSync(_this.schedulerFilePath)) {
                fs_1.default.writeFileSync(_this.schedulerFilePath + "/" + _this.schedulerFileNAME, JSON.stringify(_this.schedulerFile));
            }
            else {
                fs_1.default.mkdirSync(_this.schedulerFilePath, { recursive: true });
                fs_1.default.writeFileSync(_this.schedulerFilePath + "/" + _this.schedulerFileNAME, JSON.stringify(_this.schedulerFile));
            }
        };
        this.schedule = function (task) {
            if (task.frequency > 0) {
                var t = setInterval(function () {
                    // schedule the task
                    (0, actions_1.executeScript)(task.cmd, task.task_id, {
                        outputRequestObjects: task.outputRequestObjects,
                    }, _this.ops.executeScriptCallbacks, {
                        cwd: actions_2.FILE_BASE_PATH + task.task_id,
                        shell: os_1.default.platform().startsWith('win') ? 'cmd.exe' : '/bin/bash',
                    });
                }, task.frequency);
                _this.frequencyTimers.push(t);
            }
            else {
                (0, actions_1.executeScript)(task.cmd, task.task_id, {
                    outputRequestObjects: task.outputRequestObjects,
                }, _this.ops.executeScriptCallbacks, {
                    cwd: actions_2.FILE_BASE_PATH + task.task_id,
                    shell: os_1.default.platform().startsWith('win') ? 'cmd.exe' : '/bin/bash',
                });
            }
        };
        this.addTask = function (task) {
            _this.schedulerFile.tasks.push(task);
            _this.schedule(task);
            _this.writeToSchedulerFile();
        };
        this.clearTasks = function () {
            _this.frequencyTimers.forEach(function (e) {
                clearInterval(e);
            });
        };
        this.ops = ops;
        this.schedulerFile = {
            tasks: [],
        };
    }
    return Scheduler;
}());
exports.default = Scheduler;
