import { executeScriptCallbacks } from './declarations/actions';
import { MessageToServer } from './declarations/message';
export declare type ClientCallback = {
    notifyOnOpen?: () => void;
    notifyOnClose?: (event: any) => void;
    notifyOnError?: (event: any) => void;
    notifyOnMessage?: (event: any) => void;
};
export default class WSClient {
    private address;
    private ws;
    private callback;
    private executeScriptCallbacks;
    private autoReconnectWaitTime;
    private autoReconMaxWaitTime;
    private autoLoginReconMaxWaitTime;
    private intentionalClose;
    constructor(address: string, callback?: ClientCallback, exCallsback?: executeScriptCallbacks);
    private startWebSocketConnection;
    onPing: () => void;
    onOpen: () => void;
    onMessage: (event: any) => void;
    onError: (event: any) => void;
    onClose: (event: any) => void;
    sendMessage: (msg: MessageToServer) => void;
    closeConnection: () => void;
    updateAddress: () => Promise<void>;
    reconnectOnClose: () => void;
    sendQueuedMessages: () => void;
}
