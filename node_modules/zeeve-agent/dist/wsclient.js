"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var ws_1 = require("ws");
var agentmanager_1 = __importDefault(require("./agentmanager"));
var messageformatter_1 = __importDefault(require("./message/messageformatter"));
var constants_1 = require("./utils/constants");
var logger_1 = __importDefault(require("./utils/logger"));
// eslint-disable-next-line no-undef
var pingTimeout;
function heartbeat(ws) {
    clearTimeout(pingTimeout);
    console.info('pong sent to server at ', Date.now());
    ws.pong();
    pingTimeout = setTimeout(function () {
        logger_1.default.redBrightError('[pingTimeOut]terminating connection from agent side...');
        ws.terminate();
    }, constants_1.AGENT_PING_INTERVAL_TIME);
}
var WSClient = /** @class */ (function () {
    function WSClient(address, callback, exCallsback) {
        var _this = this;
        this.autoReconnectWaitTime = 10000;
        this.autoReconMaxWaitTime = 120000;
        this.autoLoginReconMaxWaitTime = 120000;
        this.intentionalClose = false;
        this.onPing = function () {
            console.info('ping received');
            console.info('ping received from server at ', Date.now());
            heartbeat(_this.ws);
        };
        this.onOpen = function () {
            heartbeat(_this.ws);
            if (agentmanager_1.default.getAgent().queueHasMessages()) {
                _this.sendQueuedMessages();
            }
            console.info('connected');
            if (_this.callback && _this.callback.notifyOnOpen) {
                _this.callback.notifyOnOpen();
            }
        };
        this.onMessage = function (event) {
            if (_this.callback && _this.callback.notifyOnMessage) {
                _this.callback.notifyOnMessage(event);
            }
            try {
                messageformatter_1.default.parseAndExecute(JSON.parse(event.data), _this.executeScriptCallbacks);
            }
            catch (e) {
                console.error(e);
            }
        };
        this.onError = function (event) {
            if (_this.callback && _this.callback.notifyOnError) {
                _this.callback.notifyOnError(event);
            }
            console.error(event.error);
        };
        this.onClose = function (event) {
            clearTimeout(pingTimeout);
            if (_this.intentionalClose === true) {
                logger_1.default.redBrightError('[intentionalClose]terminating connection from agent side...');
                _this.ws.removeAllListeners();
                _this.ws.terminate();
                return;
            }
            if (_this.callback && _this.callback.notifyOnClose) {
                _this.callback.notifyOnClose(event);
            }
            console.info('connection closing reason:', JSON.stringify(event.data));
            console.info('auto reconnecting in ', _this.autoReconnectWaitTime / 1000, ' seconds ....');
            _this.reconnectOnClose();
            if (_this.autoReconnectWaitTime > _this.autoReconMaxWaitTime) {
                _this.autoReconnectWaitTime = _this.autoReconMaxWaitTime;
            }
            else {
                _this.autoReconnectWaitTime *= 1.2;
            }
        };
        this.sendMessage = function (msg) {
            if (_this.ws.readyState === ws_1.WebSocket.OPEN) {
                _this.ws.send(JSON.stringify(msg));
            }
            else
                agentmanager_1.default.getAgent().addMessageToQueue(msg);
        };
        this.closeConnection = function () {
            _this.intentionalClose = true;
            _this.ws.close();
        };
        this.updateAddress = function () { return __awaiter(_this, void 0, void 0, function () {
            var _a, err_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        _a = this;
                        return [4 /*yield*/, agentmanager_1.default.getAgent().getUpdatedServerAddress()];
                    case 1:
                        _a.address = _b.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        err_1 = _b.sent();
                        console.error('failed to update clients server address:', err_1);
                        throw err_1;
                    case 3: return [2 /*return*/];
                }
            });
        }); };
        this.reconnectOnClose = function () {
            _this.updateAddress()
                .then(function () {
                if (agentmanager_1.default.getAgent().getCurrentlyExecutingTasks().size > 0) {
                    console.info('immediately reconnecting because tasks are executing...');
                    _this.startWebSocketConnection();
                }
                else {
                    setTimeout(function () {
                        // performing auto reconnection
                        console.info('performing auto reconnection....');
                        _this.startWebSocketConnection();
                    }, _this.autoReconnectWaitTime);
                }
            })
                .catch(function (err) {
                console.error('could not reconnect on close:', err);
                console.info("will perform login reconnection after failure in " + _this.autoLoginReconMaxWaitTime + " ms");
                setTimeout(function () {
                    // performing login reconnection after failure
                    console.info('performing login reconnection after failure....');
                    _this.reconnectOnClose();
                }, _this.autoLoginReconMaxWaitTime);
            });
        };
        this.sendQueuedMessages = function () {
            do {
                var msg = agentmanager_1.default.getAgent().removeMessageFromQueue();
                if (msg) {
                    _this.sendMessage(msg);
                }
            } while (agentmanager_1.default.getAgent().queueHasMessages()
                && (_this.ws.readyState === ws_1.WebSocket.OPEN));
        };
        this.address = address;
        this.startWebSocketConnection();
        this.callback = callback;
        this.executeScriptCallbacks = exCallsback;
    }
    WSClient.prototype.startWebSocketConnection = function () {
        this.ws = new ws_1.WebSocket(this.address);
        this.ws.onopen = this.onOpen;
        this.ws.onmessage = this.onMessage;
        this.ws.onerror = this.onError;
        this.ws.onclose = this.onClose;
        this.ws.on('ping', this.onPing);
    };
    return WSClient;
}());
exports.default = WSClient;
