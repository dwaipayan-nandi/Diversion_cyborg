"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var zeeve_agent_1 = require("zeeve-agent");
var commander_1 = __importStar(require("commander"));
var helpers_1 = require("./helpers");
commander_1.program.addOption(new commander_1.default.Option('--analytics', 'Enable Analytics').default(false));
commander_1.program.addOption(new commander_1.default.Option('--analyticsPort [port]', 'Analytics Port').default(5432).argParser(parseInt));
commander_1.program.addOption(new commander_1.default.Option('--analyticsHost [host]', 'Analytics Host').default('localhost'));
commander_1.program.action(function (cliArgs) {
    (0, helpers_1.getUpdatedServerAddress)().then(function (url) {
        console.log(url);
        zeeve_agent_1.AgentManager.default.initializeAgent({
            serverAddress: url,
            serverAddressUpdater: helpers_1.getUpdatedServerAddress,
            enableAnalytics: cliArgs.analytics,
            analyticsPort: cliArgs.analyticsPort,
            analyticsHost: cliArgs.analyticsHost,
        }).initiate();
    }).catch(function (err) { return console.error(err); });
});
commander_1.program.parse(process.argv);
//# sourceMappingURL=agent_start.js.map