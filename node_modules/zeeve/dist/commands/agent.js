"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var commander_1 = __importDefault(require("commander"));
var child_process_1 = require("child_process");
var util_1 = __importDefault(require("util"));
var chalk_1 = __importDefault(require("chalk"));
var clui_1 = require("clui");
var os_1 = __importDefault(require("os"));
var constants_1 = require("../utility/constants");
var env_1 = require("./env");
var execP = util_1.default.promisify(child_process_1.exec);
function getAgentStartCommand() {
    var _this = this;
    var startAgent = new commander_1.default.Command('start');
    startAgent.addOption(new commander_1.default.Option('--analytics', 'Enable Analytics').default(false));
    startAgent.addOption(new commander_1.default.Option('--analyticsPort [port]', 'Analytics Port').default(5432).argParser(parseInt));
    startAgent.addOption(new commander_1.default.Option('--analyticsHost [host]', 'Analytics Host').default('localhost'));
    var options = startAgent.opts();
    startAgent.action(function () { return __awaiter(_this, void 0, void 0, function () {
        var status, pm2install, analyticsArgs, finalCommand, _a, stdout, stderr, result, err_1;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    status = new clui_1.Spinner(chalk_1.default.cyanBright('starting agent'));
                    status.start();
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 7, , 8]);
                    return [4 /*yield*/, execP(constants_1.INSTALL_PM2_COMMAND, { shell: os_1.default.platform().startsWith('win') ? 'cmd.exe' : '/bin/bash' })];
                case 2:
                    pm2install = _b.sent();
                    if (pm2install.stderr) {
                        console.log(chalk_1.default.yellow(pm2install.stderr));
                    }
                    else {
                        console.log(chalk_1.default.green('pm2 is installed globally'));
                    }
                    // Set the arguments from either cli parameters or environment variables
                    (0, env_1.setEnvVariablesForCommand)('agent.start', options);
                    analyticsArgs = options.analytics === true || options.analytics === 'true'
                        ? ' --analytics' : '';
                    analyticsArgs += typeof options.analyticsPort === 'undefined' ? '' : " --analyticsPort ".concat(options.analyticsPort);
                    analyticsArgs += typeof options.analyticsHost === 'undefined' ? '' : " --analyticsHost ".concat(options.analyticsHost);
                    finalCommand = constants_1.AGENT_RUN_COMMAND + (analyticsArgs.length > 0 ? " -- ".concat(analyticsArgs) : '');
                    return [4 /*yield*/, execP(finalCommand, { cwd: constants_1.CWD, shell: os_1.default.platform().startsWith('win') ? 'cmd.exe' : '/bin/bash' })];
                case 3:
                    _a = _b.sent(), stdout = _a.stdout, stderr = _a.stderr;
                    if (!stderr) return [3 /*break*/, 4];
                    status.stop();
                    console.log(chalk_1.default.redBright('there was some error while starting agent...', stderr));
                    return [3 /*break*/, 6];
                case 4: return [4 /*yield*/, execP(constants_1.AGENT_BOOTUP_PERSISTENCE, { cwd: constants_1.CWD, shell: os_1.default.platform().startsWith('win') ? 'cmd.exe' : '/bin/bash' })];
                case 5:
                    result = _b.sent();
                    if (result.stderr) {
                        status.stop();
                        console.log(chalk_1.default.redBright('there was some error while running bootup persistence script for agent...', stderr));
                    }
                    status.stop();
                    console.log(chalk_1.default.green('agent successfully spawned :', stdout));
                    _b.label = 6;
                case 6: return [3 /*break*/, 8];
                case 7:
                    err_1 = _b.sent();
                    status.stop();
                    console.log(chalk_1.default.redBright("there was some error while executing agent command : ".concat(err_1)));
                    return [3 /*break*/, 8];
                case 8: return [2 /*return*/];
            }
        });
    }); });
    return startAgent;
}
function getAgentStopCommand() {
    var _this = this;
    var startAgent = new commander_1.default.Command('stop');
    startAgent.action(function () { return __awaiter(_this, void 0, void 0, function () {
        var status, _a, stdout, stderr;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    status = new clui_1.Spinner(chalk_1.default.cyanBright('stopping agent'));
                    status.start();
                    return [4 /*yield*/, execP(constants_1.AGENT_STOP_COMMAND, { cwd: constants_1.CWD, shell: os_1.default.platform().startsWith('win') ? 'cmd.exe' : '/bin/bash' })];
                case 1:
                    _a = _b.sent(), stdout = _a.stdout, stderr = _a.stderr;
                    status.stop();
                    if (stderr) {
                        console.log(chalk_1.default.redBright('there was some error while starting agent...', stderr));
                    }
                    else {
                        console.log(chalk_1.default.green('agent successfully stopped... :', stdout));
                    }
                    return [2 /*return*/];
            }
        });
    }); });
    return startAgent;
}
function getAgentCommand() {
    var agent = new commander_1.default.Command('agent');
    agent.addCommand(getAgentStartCommand());
    agent.addCommand(getAgentStopCommand());
    return agent;
}
exports.default = getAgentCommand;
//# sourceMappingURL=agent.js.map