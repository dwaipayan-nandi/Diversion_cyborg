"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAuthConfiguration = exports.getAuthCommand = void 0;
var commander_1 = __importDefault(require("commander"));
var fs_1 = __importDefault(require("fs"));
var chalk_1 = __importDefault(require("chalk"));
var env_1 = require("./env");
var homedir = require('os').homedir();
var configBasePath = "".concat(homedir, "/.zeeve");
var configFileName = 'config.json';
function setAuthConfiguration(config) {
    if (!fs_1.default.existsSync(configBasePath))
        fs_1.default.mkdirSync(configBasePath);
    fs_1.default.writeFileSync("".concat(configBasePath, "/").concat(configFileName), JSON.stringify(config));
}
function getAuthCommand() {
    var auth = new commander_1.default.Command('auth');
    var options = auth.opts();
    auth.option('-i, --access-id <access-id>', 'Auth Access ID')
        .option('-s, --secret <secret>', 'Auth Secret')
        .action(function () {
        // Set the arguments from either cli parameters or environment variables
        (0, env_1.setEnvVariablesForCommand)('auth', options);
        if (!options.accessId || !options.secret)
            return console.log(chalk_1.default.red('Please pass the Access ID & Secret'));
        var configFileJSON = {
            accessId: options.accessId,
            secret: options.secret,
        };
        try {
            setAuthConfiguration(configFileJSON);
            return console.log(chalk_1.default.green('Successfully Configured Auth.'));
        }
        catch (error) {
            return console.log(chalk_1.default.red('Sorry the file couldn\'t be saved. Please check the following error(s):'), error);
        }
    });
    return auth;
}
exports.getAuthCommand = getAuthCommand;
function getAuthConfiguration() {
    var configData = fs_1.default.readFileSync("".concat(configBasePath, "/").concat(configFileName));
    return JSON.parse(configData.toString());
}
exports.getAuthConfiguration = getAuthConfiguration;
//# sourceMappingURL=auth.js.map