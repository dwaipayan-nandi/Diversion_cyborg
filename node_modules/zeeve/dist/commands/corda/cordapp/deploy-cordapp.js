"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = exports.getDeployCordappCommand = void 0;
var commander_1 = __importDefault(require("commander"));
var fs_1 = __importDefault(require("fs"));
var request_1 = __importDefault(require("request"));
var clui_1 = __importDefault(require("clui"));
var chalk_1 = __importDefault(require("chalk"));
var mime_types_1 = __importDefault(require("mime-types"));
var common_1 = require("../../../utility/common");
var Spinner = clui_1.default.Spinner;
var cordappTarFilename = 'cordapps.tar.gz';
function callZeeveDeployCordapp(filePath, networkName) {
    var authorizationToken = (0, common_1.getAuthToken)();
    return new Promise(function (resolve, reject) {
        var options = {
            method: 'POST',
            url: "".concat(common_1.zeeveURL, "/product/corda/install-cordapp"),
            headers: {
                'Content-Type': 'multipart/form-data',
                'Authorization': "Basic ".concat(authorizationToken),
            },
            formData: {
                networkId: networkName,
                file: {
                    value: fs_1.default.createReadStream(filePath),
                    options: {
                        filename: cordappTarFilename,
                        contentType: null,
                    },
                },
            },
        };
        (0, request_1.default)(options, function (error, response) {
            if (error)
                reject(error);
            var result = JSON.parse(response.body);
            if (!result.success)
                reject(result.msg);
            resolve(result.msg);
        });
    });
}
function getDeployCordappCommand() {
    var deploy = new commander_1.default.Command('deploy');
    var options = deploy.opts();
    deploy.option('-f, --file-path <file-path>', 'File path for cordapp zip file')
        .option('-n, --network <network-name>', 'Name of the network')
        .option('-s, --skip-migrations', 'Skip running database migrations')
        .action(function () {
        if (!options.filePath) {
            console.log(chalk_1.default.red('Error: File Path not provided.'));
            return;
        }
        if (!options.network) {
            console.log(chalk_1.default.red('Error: Network Name not provided.'));
            return;
        }
        if (mime_types_1.default.lookup(options.filePath) !== 'application/gzip' && mime_types_1.default.lookup(options.filePath) !== 'application/tar' && mime_types_1.default.lookup(options.filePath) !== 'application/tar+gzip' && mime_types_1.default.lookup(options.filePath) !== 'application/x-tar') {
            console.log(chalk_1.default.red('Error: Please upload a tarball only.'));
            return;
        }
        var status = new Spinner(chalk_1.default.blueBright('Deploying the requested cordapps, please wait...'));
        status.start();
        callZeeveDeployCordapp(options.filePath, options.network).then(function (responseMsg) {
            status.stop();
            console.log(chalk_1.default.green(responseMsg));
        }, function (error) {
            status.stop();
            console.log(chalk_1.default.red("Error: ".concat(error)));
        });
    });
    return deploy;
}
exports.getDeployCordappCommand = getDeployCordappCommand;
exports.default = getDeployCordappCommand;
//# sourceMappingURL=deploy-cordapp.js.map