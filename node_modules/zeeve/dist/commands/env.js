"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setEnvVariablesForCommand = exports.commandEnvironmentsMap = void 0;
var env_1 = require("../utility/env");
exports.commandEnvironmentsMap = {
    'agent.start': {
        analytics: 'ZEEVE_AGENT_ENABLE_ANALYTICS',
        analyticsPort: 'ZEEVE_AGENT_ANALYTICS_PORT',
        analyticsHost: 'ZEEVE_AGENT_ANALYTICS_HOST',
    },
    'auth': {
        accessId: 'ZEEVE_AUTH_ACCESS_ID',
        secret: 'ZEEVE_AUTH_SECRET',
    },
    'login': {
        accessId: 'ZEEVE_AUTH_ACCESS_ID',
        secret: 'ZEEVE_AUTH_SECRET',
        loginEndpoint: 'ZEEVE_LOGIN_ENDPOINT',
        cordaDeployEndpoint: 'ZEEVE_CORDA_DEPLOY_ENDPOINT',
        wsServerAddress: 'ZEEVE_WS_SERVER_ADDRESS',
        fabricEndpoint: 'ZEEVE_FABRIC_ENDPOINT',
    },
};
/**
 * Set the Environment variables for options in a command
 * NOTE: remove this functionality from here after commander upgrade to version 8
 *       or above and use .env function with option itself.
 * @param command {SupportedCommands}
 * @param optionValues {OptionValues}
 */
var setEnvVariablesForCommand = function (command, optionValues) {
    if (!exports.commandEnvironmentsMap[command]) {
        throw new Error('Command not found in the Command Environment Map');
    }
    var options = Object.keys(exports.commandEnvironmentsMap[command]);
    options.forEach(function (option) {
        if (Object.prototype.hasOwnProperty.call(exports.commandEnvironmentsMap[command], option)) {
            var environmentVar = exports.commandEnvironmentsMap[command][option];
            (0, env_1.setCliVarOrEnvVar)(optionValues, option, environmentVar);
        }
    });
};
exports.setEnvVariablesForCommand = setEnvVariablesForCommand;
//# sourceMappingURL=env.js.map