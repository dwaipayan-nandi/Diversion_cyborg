"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = exports.getChainCodeCommitCommand = void 0;
var commander_1 = __importDefault(require("commander"));
var request_1 = __importDefault(require("request"));
var clui_1 = __importDefault(require("clui"));
var chalk_1 = __importDefault(require("chalk"));
var login_1 = require("../../login");
var Spinner = clui_1.default.Spinner;
function callChainCodeCommit(opt) {
    return __awaiter(this, void 0, void 0, function () {
        var globalConfig, _a, accessId, secret, loginEndpoint, commitEndpoint, token, _b, err_1;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    globalConfig = (0, login_1.getGlobalConfiguration)();
                    _a = globalConfig.creds, accessId = _a.accessId, secret = _a.secret;
                    loginEndpoint = globalConfig.endpoints.auth;
                    commitEndpoint = "".concat(globalConfig.endpoints.deployment.fabric, "/chaincode/commit");
                    token = { accesstoken: '' };
                    _c.label = 1;
                case 1:
                    _c.trys.push([1, 3, , 4]);
                    _b = token;
                    return [4 /*yield*/, (0, login_1.performLogin)(accessId, secret, loginEndpoint)];
                case 2:
                    _b.accesstoken = _c.sent();
                    return [3 /*break*/, 4];
                case 3:
                    err_1 = _c.sent();
                    console.error(err_1);
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/, new Promise(function (resolve, reject) {
                        var options = {
                            method: 'POST',
                            url: commitEndpoint,
                            headers: {
                                'authorization': "Bearer ".concat(token.accesstoken),
                                'Content-Type': 'application/json',
                            },
                            formData: {
                                networkId: opt.networkId,
                                chaincode: opt.chaincode,
                                version: opt.version,
                                orgs: JSON.stringify(opt.orgs),
                                peerUrls: JSON.stringify(opt.peerUrls),
                                channel: opt.channel,
                                sequence: opt.sequence,
                                initMethod: opt.initMethod,
                                initArgs: JSON.stringify(opt.initArgs),
                            },
                            timeout: 180000, // 180000
                        };
                        (0, request_1.default)(options, function (error, response) {
                            if (error) {
                                console.log('----- response body starts ----');
                                console.log(response);
                                console.log('----- response body ends -----');
                                console.log(error);
                                reject(error);
                            }
                            else if (response && response.statusCode === 200 && response.body) {
                                var result = JSON.parse(response.body);
                                if (!result.success)
                                    reject(result.message);
                                resolve(result.data);
                            }
                            else {
                                console.log(response);
                                reject(new Error('something went wrong'));
                            }
                        });
                    })];
            }
        });
    });
}
function getChainCodeCommitCommand() {
    var chaincodeCommit = new commander_1.default.Command('commit');
    var options = chaincodeCommit.opts();
    chaincodeCommit.option('-n, --network-id <network-id>', 'Id of the Network')
        .option('-cc, --chaincode <chaincode>', 'chaincode name')
        .option('-v, --version <version>', 'chaincode version')
        .option('-o, --orgs <org...>', 'chaincode organisation')
        .option('-p, --peer-urls <peer-urls...>', 'chaincode peer urls')
        .option('-ch, --channel <channel>', 'channel name to approve chaincode')
        .option('-s, --sequence <sequence>', 'chaincode sequence')
        .option('-ia, --init-args <init-args...>', 'Init method arguments ex; "marble1","blue","35","tom"')
        .option('-im, --init-method <init-method>', 'Init method name i.e, "init" or "initMarbles"')
        .action(function () {
        if (!options.peerUrls) {
            console.log(chalk_1.default.red('Error: peer urls not provided.'));
            return;
        }
        if (!options.networkId) {
            console.log(chalk_1.default.red('Error: Network Id not provided.'));
            return;
        }
        if (!options.chaincode) {
            console.log(chalk_1.default.red('Error: chaincode name not provided.'));
            return;
        }
        if (!options.version) {
            console.log(chalk_1.default.red('Error: chaincode version not provided.'));
            return;
        }
        if (!options.orgs) {
            console.log(chalk_1.default.red('Error: chaincode organisation not provided.'));
            return;
        }
        if (!options.sequence) {
            console.log(chalk_1.default.red('Error: chaincode sequence not provided.'));
            return;
        }
        if (!options.initMethod) {
            console.log(chalk_1.default.red('Error: init method not provided.'));
            return;
        }
        var status = new Spinner(chalk_1.default.blueBright('Commiting, please wait...'));
        status.start();
        callChainCodeCommit(options).then(function (responseMsg) {
            status.stop();
            console.log(chalk_1.default.green(responseMsg));
        }, function (error) {
            status.stop();
            console.log(chalk_1.default.red("Error: ".concat(error)));
        });
    });
    return chaincodeCommit;
}
exports.getChainCodeCommitCommand = getChainCodeCommitCommand;
exports.default = getChainCodeCommitCommand;
//# sourceMappingURL=commit.js.map