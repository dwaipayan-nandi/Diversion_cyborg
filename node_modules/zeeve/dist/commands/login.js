"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGlobalConfiguration = exports.getLoginCommand = exports.performLogin = exports.setGlobalConfiguration = exports.configFileName = exports.configBasePath = void 0;
/* eslint-disable indent */
var chalk_1 = __importDefault(require("chalk"));
var commander_1 = __importDefault(require("commander"));
var fs_1 = __importDefault(require("fs"));
var request_1 = __importDefault(require("request"));
var clui_1 = require("clui");
var env_1 = require("./env");
var constants_1 = require("../utility/constants");
var homedir = require('os').homedir();
exports.configBasePath = "".concat(homedir, "/.zeeve");
exports.configFileName = 'config.json';
function setGlobalConfiguration(config) {
    if (!fs_1.default.existsSync(exports.configBasePath))
        fs_1.default.mkdirSync(exports.configBasePath);
    fs_1.default.writeFileSync("".concat(exports.configBasePath, "/").concat(exports.configFileName), JSON.stringify(config));
}
exports.setGlobalConfiguration = setGlobalConfiguration;
function performLogin(accessId, secret, endpoint) {
    var status = new clui_1.Spinner(chalk_1.default.cyanBright('Initiating Login.... to endpoint ', endpoint));
    status.start();
    return new Promise(function (resolve, reject) {
        var options = {
            method: 'POST',
            url: endpoint,
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                accesskey: accessId,
                accesssecret: secret,
            }),
        };
        (0, request_1.default)(options, function (error, response) {
            status.stop();
            if (error) {
                reject(error);
            }
            if (response.statusCode === 200) {
                var result = JSON.parse(response.body);
                if (!result.success)
                    reject(result.msg);
                resolve(result.accesstoken);
            }
            else {
                reject(new Error("request failed with response status c : ".concat(response.statusCode)));
            }
        });
    });
}
exports.performLogin = performLogin;
function getLoginCommand() {
    var login = new commander_1.default.Command('login');
    var options = login.opts();
    login.option('-i, --access-id <access-id>', 'Auth Access ID')
        .option('-s, --secret <secret>', 'Auth Secret')
        .option('-ae, --login-endpoint <endpoint>', 'Endpoint for cli login')
        .option('-ce, --corda-deploy-endpoint <endpoint>', 'corda deployment endpoint')
        .option('-ws, --ws-server-address <address>', 'web socket server address for agent')
        .option('-fe, --fabric-endpoint <endpoint>', 'fabric back-end endpoint')
        .action(function () {
        // Set the arguments from either cli parameters or environment variables
        (0, env_1.setEnvVariablesForCommand)('login', options);
        var wsServerAddress = constants_1.WS_SERVER_ADDRESS;
        var fabricEndpoint = constants_1.FABRIC_BACKEND_ENDPOINT;
        if (options.wsServerAddress)
            wsServerAddress = options.wsServerAddress;
        if (options.fabricEndpoint)
            fabricEndpoint = options.fabricEndpoint;
        if (options.accessId && options.secret) {
            var loginEndpoint_1;
            var deployEndpoint_1;
            if (options.loginEndpoint) {
                loginEndpoint_1 = options.loginEndpoint;
                if (options.cordaDeployEndpoint) {
                    // all endpoints are given
                    deployEndpoint_1 = options.cordaDeployEndpoint;
                    // verify cli access credentials
                }
                else {
                    // here handle the case if deployment endpoints are not given
                    console.log(chalk_1.default.red('deployment endpoints not provided ... using default value'));
                    deployEndpoint_1 = constants_1.CORDA_DEPLOYMENT_ENDPOINT;
                }
            }
            else {
                console.log(chalk_1.default.red('login endpoints not provided ... using default value'));
                loginEndpoint_1 = constants_1.LOGIN_ENDPOINT;
            }
            performLogin(options.accessId, options.secret, loginEndpoint_1).then(function () {
                /*
                 *  this means we login was successful and
                 * hence both login endpoint and access credential are correct
                 */
                console.log(chalk_1.default.green('login endpoint and access credentials are verified '));
                var status = new clui_1.Spinner(chalk_1.default.cyan('Saving access creds'));
                status.start();
                try {
                    setGlobalConfiguration({
                        endpoints: {
                            auth: loginEndpoint_1,
                            deployment: {
                                corda: deployEndpoint_1,
                                fabric: fabricEndpoint,
                            },
                        },
                        agent: {
                            wsServerAddress: wsServerAddress,
                        },
                        creds: {
                            accessId: options.accessId,
                            secret: options.secret,
                        },
                    });
                    status.stop();
                    console.log(chalk_1.default.green('access creds and endpoints saved successfully'));
                }
                catch (err) {
                    status.stop();
                    throw err;
                }
            }).catch(function (err) {
                console.log(chalk_1.default.red('login endpoint and access credentials were not verified \n err: ', err));
            });
        }
        else {
            console.log(chalk_1.default.red('access credentials not provided'));
        }
    });
    return login;
}
exports.getLoginCommand = getLoginCommand;
function getGlobalConfiguration() {
    var configData = fs_1.default.readFileSync("".concat(exports.configBasePath, "/").concat(exports.configFileName));
    return JSON.parse(configData.toString());
}
exports.getGlobalConfiguration = getGlobalConfiguration;
//# sourceMappingURL=login.js.map